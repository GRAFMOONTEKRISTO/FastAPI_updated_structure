# All install:
#
# 1. pip install fastapi uvicorn
# 2. pip install python-dotenv - это правильный способ
# 3. pip install sqlalchemy alembic psycopg2
# 4. pip install "fastapi-users[sqlalchemy]" - скачивание для библиотеки FastUsers
# 5. pip install asyncpg
# 6. pip install fastapi-cache2[redis]
# 7. pip install celery flower
#
# All uninstall
#
# 1. pip uninstall psycopg2 - Потом потребуется, для асинхронного програмирвоания, удалить
#
# ------------------------------------------------------------------------------------------------------------------------
#
# ОСНОВА
#
# 1. Запуск программы
# uvicorn - веб-сервер, который обрабатывает запросы
# uvicorn [название главного файла]:[название переменной, которое создает приложение] --reload(автоматическая перезагрузка,если что-то поменялось в коде)
#
#
# 2. Пример SQL-запроса
# 	   1. select * from role;
# 	   2. delete table [name_table];
# 	   3. insert into role values(1,'user', null),(2.'admin', null);
#
#
# 3. Работа с миграциями
#     1. alembic init migrations - сначала иницилизируем
#     2. alembic revision --autogenerate -m "Назавание миграции" - создаем ревизию
#     3. alembic upgrade [код до какой ревизии хочу откатиться]
#         1.DROP TABLE [НАЗВАНИЕ] CASCADE; - Удаление талиц в БД
#
#
# ------------------------------------------------------------------------------------------------------------------------
# ###REDIS###
#
# Используется:
#
# 1. для кеширования
# 2. для хранения сессий
#
# Использую библиотеку fastapi cache
# Установка (смотря с чем используешь):
#
# 1. pip install fastapi-cache2[redis]
# 2. pip install "fastapi-cache2[memcache]
# 3. pip install "fastapi-cache2[dynamodb]
#
# Важно знать:
#
# 1. добавить ключ - set [name_key] [value_key]
# 2.
# 3.
#
# Как работать в Redis
#
# 1.Сначала нужно запустить redis-server (чтобы он поймал твой сервер)
# 2.Затем запускаем 'среду' redis-cli (и в ней работаем)
#
# Redis нужен для молниеносного ответа пользователю
# Это что-то вроде БД, только он встроен в оперативную память компьютера, Redis написан на языке C и, этим самым,
# он быстрее отдает ответ пользователю.
#
# ------------------------------------------------------------------------------------------------------------------------
#
# Библиотеки celery and flower
#
# celery - позволяет нам делать фоновые задачи, отложенные задачи, переодические задачи
# (отправлять каждое утро кадому инвестору отчет на платформе) и позволяет очень хорошо кастомизировать задачи
#
# Изначально нужно инициализировать celery
#
# 1. from celery import Celery
# 2. celery = Celery('tasks', broker='redis://localhost:6379')
#
# Запуск calery:
#
# Пример: celery -A(наше приложение) task.tasks:celery worker --loglevel=INFO(логирование и получение только информации)
#                                                 --pool=solo(прописваем команду, если винда (selery писали не для винды))
#
# Общий вид: celery -A src.task.tasks:celery worker --loglevel=INFO --pool=solo
#
# НЕ ЗАБЫВАЕМ ПРО ПОДКЛЮЧЕНИЯ REDIS(SERVER AND CLI)
#
# Потом нужно запустить Web-интерфейс, чтобы было удобно мониторить задачи (в другом терминале)
# celery -A src.tasks.tasks:celery flower
#
# ------------------------------------------------------------------------------------------------------------------------
#
# ТЕСТИРОВАНИЕ
#
# Есть два вида тестирования: синхронное и асинхронное
#
# 1. pytest - асинхронное
# 2. TestClient - синхронное


# https://github.com/zhanymkanov/fastapi-best-practices - лучшие практики архитектуры